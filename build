#!/bin/bash

set -Ee
onerror() {
    echo "Fail to execute: $0 $@ ($?)"
    exit 1
}
# exit 1 on error
trap onerror ERR

pull() {
    image=$1
    if [ -z "$image" ]; then exit 1; fi
    repo=$DOCKER_USERNAME/$image
    docker pull $repo
    docker tag  $repo  $image
    docker rmi  $repo
}

build() {
    image=$1
    docker build -t $image ./$image
}

push() {
    image=$1
    repo=$DOCKER_USERNAME/$image
    docker tag  $image  $repo
    docker push         $repo
}

easy() {
    # start timer
    # @see: https://unix.stackexchange.com/a/354456/244069
    SECONDS=0

    docker build -t complex .

    docker images

    # stop timer
    timer_msg=
    if (( $SECONDS > 3600 )) ; then
        let "hours=SECONDS/3600"
        let "minutes=(SECONDS%3600)/60"
        let "seconds=(SECONDS%3600)%60"
        timer_msg="Completed in $hours hour(s), $minutes minute(s) and $seconds second(s)"
    elif (( $SECONDS > 60 )) ; then
        let "minutes=(SECONDS%3600)/60"
        let "seconds=(SECONDS%3600)%60"
        timer_msg="Completed in $minutes minute(s) and $seconds second(s)"
    else
        timer_msg="Completed in $SECONDS seconds"
    fi

    echo "$timer_msg"
}

clean() {
    CONTAINERS=$(docker ps -qa)
    [ -n "$CONTAINERS" ] && docker rm -f $CONTAINERS
    IMAGES=$(docker images --format "{{.Repository}}:{{.ID}}" | sed '/^ubuntu/d' | cut -d: -f2)
    [ -n "$IMAGES" ] && docker rmi -f $IMAGES
}

case "$1" in
    easy)
    easy
    ;;

    clean)
    clean
    ;;

    *)
    echo "Usage: $0 easy"
    echo "       $0 clean"
    exit 1
    ;;
esac

exit 0
